/*
 * DatabaseHandler.c
 *
 *  Created on: Dec 28, 2023
 *      Author: william
 */

#include <DatabaseHandler.h>

void createDatabase(void){
	sqlite3 * db;
	int rc = sqlite3_open(DATABASE, &db);
	if(rc == SQLITE_OK){
		//Check if the table exists
		const char * checkQuery = "SELECT name FROM sqlite_master where type='table' AND name='RECORDS';";
		sqlite3_stmt * checkStatement;

		if(sqlite3_prepare_v2(db, checkQuery, -1, &checkStatement, NULL) == SQLITE_OK){
			if(sqlite3_step(checkStatement) != SQLITE_ROW){
				//Table does not exist, create the database and table
				const char * createQuery = "CREATE TABLE RECORDS(" \
										"ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL," \
										"NAME CHAR(60)," \
										"ACCOUNT INT NOT NULL," \
										"AGE INT NOT NULL,"  \
										"ADDRESS CHAR(60)," \
										"CITIZENSHIP CHAR(16)," \
										"ACC_TYPE CHAR(11)," \
										"PHONE CHAR(11)," \
										"AMOUNT REAL," \
										"DOB CHAR(12)," \
										"DATE CHAR(12));";

				if(sqlite3_exec(db, createQuery, NULL, NULL, NULL) != SQLITE_OK){
					fprintf(stderr, "Error creating table: %s\n", sqlite3_errmsg(db));
				}
			}
			sqlite3_finalize(checkStatement);
		} else {
			fprintf(stderr, "Error opening database: %s\n", sqlite3_errmsg(db));
		}
	}
}

void addAccount(char * sqlStmt){
	sqlite3 * db;
	char * zErrMsg = 0;
	int rc;

	//Open the database
	if(sqlite3_open(DATABASE, &db) != SQLITE_OK){
		fprintf(stderr, "Error opening the database\n");
		return;
	}

	rc = sqlite3_exec(db, sqlStmt, NULL, 0, &zErrMsg);
	if(rc != SQLITE_OK){
		fprintf(stderr, "SQL Error: %s\n", zErrMsg);
		sqlite3_free(zErrMsg);
		return;
	}

	sqlite3_close(db);
}

void deleteAccount(const int accountNumber){
	char sqlStmt[60];
	sqlite3 * db;
	char * zErrMsg = 0;
	int rc;

	//Create SQL Statement
	sprintf(sqlStmt, "DELETE FROM RECORDS where ACCOUNT = %d;", accountNumber);

	//Open Database
	if(sqlite3_open(DATABASE, &db) != SQLITE_OK){
		fprintf(stderr, "Error opening the database\n");
		return;
	}

	//Execute SQL Query
	rc = sqlite3_exec(db, sqlStmt, NULL, 0, &zErrMsg);
	if(rc != SQLITE_OK){
		fprintf(stderr, "SQL Error: %s\n", zErrMsg);
		sqlite3_free(zErrMsg);
		return;
	}

	sqlite3_close(db);
	return;
}

int displayAllAccounts(){
	sqlite3 * db;
	sqlite3_stmt *stmt;
	int recordsFound = 0;
	const char *selectQuery = "SELECT * FROM RECORDS;";

	//Open Database
	if(sqlite3_open(DATABASE, &db) != SQLITE_OK){
		fprintf(stderr, "Error opening the database\n");
		return -1;
	}

	//Prepare the SELECT Statement
	if(sqlite3_prepare_v2(db, selectQuery, -1, &stmt, NULL) != SQLITE_OK){
		fprintf(stderr, "Error preparing SELECT statement: %s", sqlite3_errmsg(db));
		return -1;
	}

	while(sqlite3_step(stmt) == SQLITE_ROW){
		recordsFound++;

		//Retrieve data from the current row
        int acc_no = sqlite3_column_int(stmt, 2);
        char *name = (char *)sqlite3_column_text(stmt, 1);
        char *address = (char *)sqlite3_column_text(stmt, 4);
        char *phone = (char *)sqlite3_column_text(stmt, 7);

        //Display data
        printf("%-15d%-25s%-30s%-15s\n", acc_no, name, address, phone);
	}

	//Finalize the statement
	sqlite3_finalize(stmt);
	sqlite3_close(db);

	return recordsFound;
}

int displayAccount(const int accountNumber){
	sqlite3 * db;
	sqlite3_stmt *stmt;
	int recordsFound = 0;
	char selectQuery[100];

	//Open Database
	if(sqlite3_open(DATABASE, &db) != SQLITE_OK){
		fprintf(stderr, "Error opening the database\n");
		return -1;
	}

	//Prepare the SELECT Statement
	sprintf(selectQuery, "SELECT * FROM RECORDS WHERE ACCOUNT = %d;", accountNumber);
	if(sqlite3_prepare_v2(db, selectQuery, -1, &stmt, NULL) != SQLITE_OK){
		fprintf(stderr, "Error preparing SELECT statement: %s", sqlite3_errmsg(db));
		return -1;
	}

	printf("\nACC. NO.\tNAME\t\t\tADDRESS\t\t\t\tPHONE\n");
	sqlite3_step(stmt);

	//Retrieve data from the current row
	int acc_no = sqlite3_column_int(stmt, 2);
	char *name = (char *)sqlite3_column_text(stmt, 1);
	char *address = (char *)sqlite3_column_text(stmt, 4);
	char *phone = (char *)sqlite3_column_text(stmt, 7);

	//Display data
	printf("%-15d%-25s%-30s%-15s\n", acc_no, name, address, phone);

	//Finalize the statement
	sqlite3_finalize(stmt);
	sqlite3_close(db);

	return recordsFound;
}

int displayAccountByName(const char * userName){
	sqlite3 * db;
	sqlite3_stmt *stmt;
	int recordsFound = 0;
	char selectQuery[160];

	//Open Database
	if(sqlite3_open(DATABASE, &db) != SQLITE_OK){
		fprintf(stderr, "Error opening the database\n");
		return -1;
	}

	printf("%s\n", userName);

	//Prepare the SELECT Statement
	sprintf(selectQuery, "SELECT * FROM RECORDS WHERE NAME = '%s';", userName);
	if(sqlite3_prepare_v2(db, selectQuery, -1, &stmt, NULL) != SQLITE_OK){
		fprintf(stderr, "Error preparing SELECT statement: %s", sqlite3_errmsg(db));
		return -1;
	}

	printf("\nACC. NO.\tNAME\t\t\tADDRESS\t\t\t\tPHONE\n");
	sqlite3_step(stmt);

	//Retrieve data from the current row
	int acc_no = sqlite3_column_int(stmt, 2);
	char *name = (char *)sqlite3_column_text(stmt, 1);
	char *address = (char *)sqlite3_column_text(stmt, 4);
	char *phone = (char *)sqlite3_column_text(stmt, 7);

	//Display data
	printf("%-15d%-25s%-30s%-15s\n", acc_no, name, address, phone);

	//Finalize the statement
	sqlite3_finalize(stmt);
	sqlite3_close(db);

	return recordsFound;
}

int updateAccount(int option, char * newData, const int accountNumber){
	sqlite3 * db;
	char * zErrMsg = 0;
	char selectQuery[160];
	int rc;

	//Open Database
	if(sqlite3_open(DATABASE, &db) != SQLITE_OK){
		fprintf(stderr, "Error opening the database\n");
		return false;
	}


	switch(option){
	case PHONE:
		sprintf(selectQuery, "UPDATE RECORDS set PHONE = '%s' WHERE ACCOUNT = %d;",
						newData, accountNumber);
		break;
	case ADDRESS:
		sprintf(selectQuery, "UPDATE RECORDS set ADDRESS = '%s' WHERE ACCOUNT = %d;",
				newData, accountNumber);
		break;
	case TRANSACTION:
		char * endptr;
		int number = strtol(newData, NULL, 10);
		sprintf(selectQuery, "UPDATE RECORDS set AMOUNT = %d WHERE ACCOUNT = %d;",
				newData, accountNumber);
		break;
	}

	//Update Account
	rc = sqlite3_exec(db, selectQuery, NULL, 0, &zErrMsg);
	if(rc != SQLITE_OK){
		fprintf(stderr, "SQL Error: %s\n", zErrMsg);
		sqlite3_free(zErrMsg);
		sqlite3_close(db);
		return false;
	}

	//Close database
	sqlite3_close(db);

	return true;
}

int entryExists(int accountNumber){
	sqlite3 * db;
	sqlite3_stmt * stmt;
	char sql[100];
	int result = -1; //Default: Entry does not exist or an error occurred

	//Open the database
	if(sqlite3_open(DATABASE, &db) != SQLITE_OK){
		fprintf(stderr, "Error opening the database\n");
		return result;
	}

	// Create the SQL statement dynamically
	snprintf(sql, sizeof(sql), "SELECT COUNT(*) FROM RECORDS WHERE ACCOUNT = %d;", accountNumber);

	//Prepare the SQL Statement into a byte code program to be executed by SQLite
	if(sqlite3_prepare_v2(db, sql, -1, &stmt, NULL) != SQLITE_OK){
		fprintf(stderr, "Error preparing the SQL Statement\n");
		sqlite3_close(db);
		return result;
	}

	// Execute the statement
	if(sqlite3_step(stmt) == SQLITE_ROW){
		//Fetch the result (number of entries with the given account number)
		int count = sqlite3_column_int(stmt, 0);

		//If count is greater than 0, entry exists
		result = (count > 0) ? 1 : 0;
	}

	// Finalize the statement and close database
	sqlite3_finalize(stmt);
	sqlite3_close(db);

	return result;
}

int nameEntryExists(char * name){
	sqlite3 * db;
	sqlite3_stmt * stmt;
	char sql[100];
	int result = -1; //Default: Entry does not exist or an error occurred

	//Open the database
	if(sqlite3_open(DATABASE, &db) != SQLITE_OK){
		fprintf(stderr, "Error opening the database\n");
		return result;
	}

	// Create the SQL statement dynamically
	snprintf(sql, sizeof(sql), "SELECT COUNT(*) FROM RECORDS WHERE NAME = %s;", name);

	//Prepare the SQL Statement into a byte code program to be executed by SQLite
	if(sqlite3_prepare_v2(db, sql, -1, &stmt, NULL) != SQLITE_OK){
		fprintf(stderr, "Error preparing the SQL Statement\n");
		sqlite3_close(db);
		return result;
	}

	// Execute the statement
	if(sqlite3_step(stmt) == SQLITE_ROW){
		//Fetch the result (number of entries with the given account number)
		int count = sqlite3_column_int(stmt, 0);

		//If count is greater than 0, entry exists
		result = (count > 0) ? 1 : 0;
	}

	// Finalize the statement and close database
	sqlite3_finalize(stmt);
	sqlite3_close(db);

	return result;
}

int getData(struct Customer * customer, int accountNumber){
	sqlite3 * db;
	sqlite3_stmt *stmt;
	char selectQuery[100];

	//Open Database
	if(sqlite3_open(DATABASE, &db) != SQLITE_OK){
		fprintf(stderr, "Error opening the database\n");
		return -1;
	}

	//Prepare the SELECT Statement
	sprintf(selectQuery, "SELECT * FROM RECORDS WHERE ACCOUNT = %d;", accountNumber);
	if(sqlite3_prepare_v2(db, selectQuery, -1, &stmt, NULL) != SQLITE_OK){
		fprintf(stderr, "Error preparing SELECT statement: %s", sqlite3_errmsg(db));
		return -1;
	}

	sqlite3_step(stmt);

	//Retrieve data from the current row
	customer->acc_no = sqlite3_column_int(stmt, 1);
	strcpy(customer->name, (char *)sqlite3_column_text(stmt, 2));
	customer->age = sqlite3_column_int(stmt, 3);
	strcpy(customer->address, (char *)sqlite3_column_text(stmt, 4));
	strcpy(customer->citizenship, (char *)sqlite3_column_text(stmt, 5));
	strcpy(customer->acc_type, (char *)sqlite3_column_text(stmt, 6));
	strcpy(customer->phone, (char *)sqlite3_column_text(stmt, 7));
	customer->amt = sqlite3_column_double(stmt, 8);

	//Finalize the statement
	sqlite3_finalize(stmt);
	sqlite3_close(db);

	return 0;
}
